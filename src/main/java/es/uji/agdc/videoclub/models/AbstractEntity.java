package es.uji.agdc.videoclub.models;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import javax.persistence.*;
import java.time.LocalDateTime;

/**
 * Base class for all the entities from the business domain
 * Provides by default:
 * - An ID
 * - The creation timestamp
 * - The timestamp of the last update
 *
 * Also provides equality and hash methods, do not override them in children classes!
 */

@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
public abstract class AbstractEntity {

    private static Logger log = LoggerFactory.getLogger(AbstractEntity.class);

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(nullable = false)
    private Long id;

    @CreatedDate
    private LocalDateTime createdAt;

    @LastModifiedDate
    private LocalDateTime updatedAt;

    public Long getId() {
        return id;
    }

    public AbstractEntity setId(Long id) {
        log.warn("setId() called. Only call setId() while testing");
        this.id = id;
        return this;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Checks the ID of the entity, and tells you if it is new or not
     * @return true if the entity is new
     */
    public boolean isNew() {
        return getId() == null;
    }

    /**
     * Equals method generated by IntelliJ
     * @param o The object whose equality is going to be evaluated with the caller
     * @return true if both objects match
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        AbstractEntity that = (AbstractEntity) o;

        return getId() != null ? getId().equals(that.getId()) : that.getId() == null;
    }

    /**
     * HashChode method generated by IntelliJ
     * @return the hash of the object based on its ID
     */
    @Override
    public int hashCode() {
        return getId() != null ? getId().hashCode() : 0;
    }

    @Override
    public String toString() {
        return "AbstractEntity{" +
                "id=" + id +
                ", createdAt=" + createdAt +
                ", updatedAt=" + updatedAt +
                '}';
    }
}
